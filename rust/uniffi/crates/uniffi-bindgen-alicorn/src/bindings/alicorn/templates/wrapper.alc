# This file was autogenerated by some hot garbage in the `uniffi-alicorn` crate.
# Trust me, you don't want to mess with it!

{%- call alicorn::docstring_value(ci.namespace_docstring(), 0) %}

# Common helper code.
#
# Ideally this would live in a separate .alc file where it can be unit-tested etc.
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi-alicorn` that was used to
# compile the Rust component. The easiest way to ensure this is to bundle the Alicorn
# helpers directly inline like we're doing here.

# Standard library imports

# Added imports
{%- for req in self.imports() %}
{{ req.render() }}
{%- endfor %}

{% include "Helpers.alc" %}

# Contains loading, initialization code, and the FFI function declarations.
{% include "NamespaceLibraryTemplate.alc" %}

# Public interface members begin here.
{{ type_helper_code }}

# Async support
{%- if ci.has_async_fns() %}
{%- include "Async.alc" %}
{%- endif %}

{%- for func in ci.function_definitions() %}
{%- include "TopLevelFunctionTemplate.alc" %}
{%- endfor %}

{% import "macros.alc" as alicorn %}
