# #version 450
# in vec2 pos;
# layout(binding=1) uniform vec4 PosDim;
# layout(binding=2) uniform vec4 DimBorderBlur;
# layout(binding=3) uniform vec4 Corners;
# layout(binding=4) uniform vec4 Fill;
# layout(binding=5) uniform vec4 Outline;
# out vec4 fragColor;
#
# float linearstep(float low, float high, float x) { return clamp((x - low) / (high - low), 0.0, 1.0); }
# float rectangle(vec2 samplePosition, vec2 halfSize, vec4 edges) {
#     float edge = 20.0;
#     if(samplePosition.x > 0.0)
#       edge = (samplePosition.y < 0.0) ? edges.y : edges.z;
#     else
#       edge = (samplePosition.y < 0.0) ? edges.x : edges.w;
#
#     vec2 componentWiseEdgeDistance = abs(samplePosition) - halfSize + vec2(edge);
#     float outsideDistance = length(max(componentWiseEdgeDistance, 0.0));
#     float insideDistance = min(max(componentWiseEdgeDistance.x, componentWiseEdgeDistance.y), 0.0);
#     return outsideDistance + insideDistance - edge;
# }
#
# void main()
# {
#     // Ideally we would get DPI for both height and width, but for now we just assume DPI isn't weird
#     float w = fwidth(PosDim.z*pos.x) * 0.5 * (1.0 + DimBorderBlur.w);
#     vec2 uv = (pos * PosDim.zw) - (PosDim.zw * 0.5);
#
#     float dist = rectangle(uv, PosDim.zw * 0.5, Corners);
#   	float alpha = linearstep(w, -w, dist);
#     float s = linearstep(w, -w, dist + DimBorderBlur.z);
#
#     // Output to screen
#     //fragColor = vec4(dist,dist,dist,1);
#     fragColor = (vec4(Fill.rgb, 1)*Fill.a*s) + (vec4(Outline.rgb, 1)*Outline.a*clamp(alpha - s, 0.0, 1.0));
# }

let frag-shader-type = forall (pos : glsl-vec2, PosDim : glsl-vec4, DimBorderBlur : glsl-vec4, Corners : glsl-vec4, Fill : glsl-vec4, Outline : glsl-vec4) -> ((glfragcolor : glsl-vec4))

let glsl-print-frag-shader = intrinsic
	""""
		return function(frag_shader)
			local param_name, code, capture, _capture_dbg, _param_debug = frag_shader:unwrap_closure()
			local elements, element_names = code:unwrap_tuple_cons()
			local context = terms.PrettyprintingContext.new()
			for _, name in ipairs({"pos", "PosDim", "DimBorderBlur", "Corners", "Fill", "Outline"}) do
				context = context:append(name)
			end
			local glfragcolor_term = elements[1]
			local glfragcolor = glfragcolor_term:glsl_print(context)
			local boilerplate = "#version 450\nin vec2 pos;\nlayout(binding=1) uniform vec4 PosDim;\nlayout(binding=2) uniform vec4 DimBorderBlur;\nlayout(binding=3) uniform vec4 Corners;\nlayout(binding=4) uniform vec4 Fill;\nlayout(binding=5) uniform vec4 Outline;\nout vec4 fragColor;\n"
			local frag_shader = boilerplate .. "void main() {\n  fragColor = " .. glfragcolor .. ";\n}\n"
			local printed_frag_shader = U.litprint(frag_shader)
			return printed_frag_shader
		end
	:
	host-func-type ((frag-shader : wrapped(frag-shader-type))) -> ((str : host-string))

let linearstep = lambda (low : glsl-float, high : glsl-float, x : glsl-float)
	clamp((x - low) / (high - low), 0, 1)

let rectangle = lambda (samplePosition : glsl-vec2, halfSize : glsl-vec2, edges : glsl-vec4)
	let (samplePosition-x, samplePosition-y) = split-vec2(samplePosition)
	let (edges-x, edges-y, edges-z, edges-w) = split-vec4(edges)
	let edge = ternary (samplePosition-x > 0)
		ternary(samplePosition-y < 0, edges-y, edges-z)
		ternary(samplePosition-y < 0, edges-x, edges-w)
	let componentWiseEdgeDistance = add-vec2
		sub-vec2(abs-vec2(samplePosition), halfSize)
		mk-vec2(edge, edge)
	
	let (componentWiseEdgeDistance-x, componentWiseEdgeDistance-y) = split-vec2(componentWiseEdgeDistance)
	let outsideDistance = length(mk-vec2(max(componentWiseEdgeDistance-x, 0.0), max(componentWiseEdgeDistance-y, 0.0)))
	let insideDistance = min(max(componentWiseEdgeDistance-x, componentWiseEdgeDistance-y), 0.0)
	outsideDistance + insideDistance - edge

let frag-shader = lambda (pos : glsl-vec2, PosDim : glsl-vec4, DimBorderBlur : glsl-vec4, Corners : glsl-vec4, Fill : glsl-vec4, Outline : glsl-vec4)
	let (PosDim-x, PosDim-y, PosDim-z, PosDim-w) = split-vec4(PosDim)
	let (DimBorderBlur-x, DimBorderBlur-y, DimBorderBlur-z, DimBorderBlur-w) = split-vec4(DimBorderBlur)
	let (pos-x, pos-y) = split-vec2(pos)

	let w = fwidth((PosDim-z * pos-x)) * 0.5 * (1.0 + DimBorderBlur-w);
	let uv = mk-vec2((pos-x * PosDim-z) - (PosDim-z * 0.5), (pos-y * PosDim-w) - (PosDim-w * 0.5))

	let dist = rectangle(uv, mk-vec2(PosDim-z * 0.5, PosDim-w * 0.5), Corners);
	let alpha = linearstep(w, w * -1.0, dist)
	let s = linearstep(w, w * -1.0, dist + DimBorderBlur-z)

	let (Fill-r, Fill-g, Fill-b, Fill-a) = split-vec4(Fill)
	let (Outline-r, Outline-g, Outline-b, Outline-a) = split-vec4(Outline)
	let c = clamp(alpha - s, 0.0, 1.0)

	let premultiply-fill = mk-vec4(Fill-r * Fill-a * s, Fill-g * Fill-a * s, Fill-b * Fill-a * s, 1)
	let premultiply-outline = mk-vec4(Outline-r * Outline-a * c, Outline-g * Outline-a * c, Outline-b * Outline-a * c, 1)
	let output = add-vec4(premultiply-fill, premultiply-outline)
	tuple-of-implicit(output)

let (frag-shader-string) = glsl-print-frag-shader(wrap(frag-shader))
frag-shader-string
